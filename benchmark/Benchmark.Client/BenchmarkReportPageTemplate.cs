// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 16.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace Benchmark.Client
{
    using System.Linq;
    using System.Text;
    using System.Collections.Generic;
    using Benchmark.Client;
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    
    #line 1 "C:\git\cysharp\MagicOnion\benchmark\Benchmark.Client\BenchmarkReportPageTemplate.tt"
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "16.0.0.0")]
    public partial class BenchmarkReportPageTemplate : BenchmarkReportPageTemplateBase
    {
#line hidden
        /// <summary>
        /// Create the template output
        /// </summary>
        public virtual string TransformText()
        {
            this.Write("\r\n");
            
            #line 8 "C:\git\cysharp\MagicOnion\benchmark\Benchmark.Client\BenchmarkReportPageTemplate.tt"

    var client = Report.Client;
    var summary = Report.Summary;
    var result = Report.Result;

            
            #line default
            #line hidden
            this.Write(@"
<!-- auto-generated -->
<!DOCTYPE html>
<html lang=""ja"">

<head>
    <meta charset=""utf-8"">
    <title>MagicOnion Benchmark</title>

    <link rel=""stylesheet"" href=""https://stackpath.bootstrapcdn.com/bootstrap/4.5.0/css/bootstrap.min.css""
        integrity=""sha384-9aIt2nRpC12Uk9gS9baDl411NQApFmC26EwAOH8WgZl5MYYxFfc+NcPb1dKGj7Sk"" crossorigin=""anonymous""/>
    <!-- MDB -->
    <link rel=""stylesheet"" href=""https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.1/css/all.min.css""/>
    <link rel=""stylesheet"" href=""https://fonts.googleapis.com/css?family=Roboto:300,400,500,700&display=swap""/>
    <link rel=""stylesheet"" href=""https://cdnjs.cloudflare.com/ajax/libs/mdb-ui-kit/3.0.0/mdb.min.css""/>

    <script src=""https://cdnjs.cloudflare.com/ajax/libs/Chart.js/2.7.2/Chart.bundle.js""></script>
</head>

<body>
    <header>
        <nav class=""navbar navbar-dark bg-dark box-shadow"">
            <div class=""container d-flex"">
                <a class=""navbar-brand"" href=""#"">MagicOnion Benchmark</a>
                <div class=""collapse navbar-collapse"" id=""navbarText"">
                    <ul class=""navbar-nav me-auto mb-2 mb-lg-0"">
                    </ul>
                </div>
                <span class=""navbar-text"">");
            
            #line 41 "C:\git\cysharp\MagicOnion\benchmark\Benchmark.Client\BenchmarkReportPageTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(client.Framework));
            
            #line default
            #line hidden
            this.Write(" v");
            
            #line 41 "C:\git\cysharp\MagicOnion\benchmark\Benchmark.Client\BenchmarkReportPageTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(client.Version));
            
            #line default
            #line hidden
            this.Write(@"</span>
            </div>
        </nav>
    </header>

    <main>
        <div class=""bg-light"">
            <div class=""container"" style=""padding-top: 3rem;"">

                <h1 class=""text-muted"">Test Result</h1>
                <p class=""text-muted"">Id: ");
            
            #line 51 "C:\git\cysharp\MagicOnion\benchmark\Benchmark.Client\BenchmarkReportPageTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(summary.Id));
            
            #line default
            #line hidden
            this.Write(@"</p>

                <div class=""table-responsive"">
                    <h2 class=""text-muted"">Client</h2>
                    <table class=""table table-striped table-sm"">
                        <thead>
                            <tr>
                            <th scope=""col"">OS</th>
                            <th scope=""col""># Process</th>
                            <th scope=""col"">Memory</th>
                            </tr>
                        </thead>
                        <tr>
                            <td>");
            
            #line 64 "C:\git\cysharp\MagicOnion\benchmark\Benchmark.Client\BenchmarkReportPageTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(client.Os));
            
            #line default
            #line hidden
            this.Write(" (");
            
            #line 64 "C:\git\cysharp\MagicOnion\benchmark\Benchmark.Client\BenchmarkReportPageTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(client.Architecture));
            
            #line default
            #line hidden
            this.Write(")</td>\r\n                            <td>");
            
            #line 65 "C:\git\cysharp\MagicOnion\benchmark\Benchmark.Client\BenchmarkReportPageTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(client.Processors));
            
            #line default
            #line hidden
            this.Write("</td>\r\n                            <td>");
            
            #line 66 "C:\git\cysharp\MagicOnion\benchmark\Benchmark.Client\BenchmarkReportPageTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(client.Memory));
            
            #line default
            #line hidden
            this.Write(@"GiB</td>
                        </tr>
                        </tbody>
                    </table>
                </div>

                <div class=""table-responsive"">
                    <h2 class=""text-muted"">Summary</h2>
                    <table class=""table table-striped table-sm"">
                        <thead>
                            <th scope=""col""># Clients</th>
                            <th scope=""col""># Itelations</th>
                            <th scope=""col"">Begin</th>
                            <th scope=""col"">End</th>
                            <th scope=""col"">Duration Total</th>
                            <th scope=""col"">Duration Avg</th>
                            <th scope=""col"">Duration Min</th>
                            <th scope=""col"">Duration Max</th>
                        </thead>
                        <tr>
                            <td>");
            
            #line 86 "C:\git\cysharp\MagicOnion\benchmark\Benchmark.Client\BenchmarkReportPageTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(summary.Clients));
            
            #line default
            #line hidden
            this.Write("</td>\r\n                            <td>");
            
            #line 87 "C:\git\cysharp\MagicOnion\benchmark\Benchmark.Client\BenchmarkReportPageTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(summary.Itelations));
            
            #line default
            #line hidden
            this.Write("</td>\r\n                            <td>");
            
            #line 88 "C:\git\cysharp\MagicOnion\benchmark\Benchmark.Client\BenchmarkReportPageTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(summary.Begin));
            
            #line default
            #line hidden
            this.Write("</td>\r\n                            <td>");
            
            #line 89 "C:\git\cysharp\MagicOnion\benchmark\Benchmark.Client\BenchmarkReportPageTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(summary.End));
            
            #line default
            #line hidden
            this.Write("</td>\r\n                            <td>");
            
            #line 90 "C:\git\cysharp\MagicOnion\benchmark\Benchmark.Client\BenchmarkReportPageTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(summary.DurationTotal.TotalSeconds));
            
            #line default
            #line hidden
            this.Write(" sec</td>\r\n                            <td>");
            
            #line 91 "C:\git\cysharp\MagicOnion\benchmark\Benchmark.Client\BenchmarkReportPageTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(summary.DurationAvg.TotalSeconds));
            
            #line default
            #line hidden
            this.Write(" sec</td>\r\n                            <td>");
            
            #line 92 "C:\git\cysharp\MagicOnion\benchmark\Benchmark.Client\BenchmarkReportPageTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(summary.DurationMin.TotalSeconds));
            
            #line default
            #line hidden
            this.Write(" sec</td>\r\n                            <td>");
            
            #line 93 "C:\git\cysharp\MagicOnion\benchmark\Benchmark.Client\BenchmarkReportPageTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(summary.DurationMax.TotalSeconds));
            
            #line default
            #line hidden
            this.Write(" sec</td>\r\n                        </tr>\r\n                        </tbody>\r\n     " +
                    "               </table>\r\n                </div>\r\n\r\n                <div class=\"t" +
                    "able-responsive\">\r\n                    <h2 class=\"text-muted\">Result</h2>\r\n     " +
                    "               <table class=\"table table-striped table-sm\">\r\n                   " +
                    "     <thead>\r\n                            <th scope=\"col\">%{256}%</th>\r\n        " +
                    "                    <th scope=\"col\">%{1024}%</th>\r\n                            <" +
                    "th scope=\"col\">%{4096}%</th>\r\n                            <th scope=\"col\">%{1638" +
                    "4}%</th>\r\n                            <th scope=\"col\">Errors</th>\r\n             " +
                    "           </thead>\r\n                        <tr>\r\n                            <" +
                    "td>%{10sec}%</td>\r\n                            <td>%{30sec}%</td>\r\n             " +
                    "               <td>%{60sec}%</td>\r\n                            <td>%{120sec}%</t" +
                    "d>\r\n                            <td>%{0}%</td>\r\n                        </tr>\r\n " +
                    "                       </tbody>\r\n                    </table>\r\n                <" +
                    "/div>\r\n\r\n                <div>\r\n                    <h2>積み上げグラフ</h2>\r\n          " +
                    "          <canvas id=\"benchmarkStackBar\"></canvas>\r\n\r\n                    <scrip" +
                    "t>\r\n                        var ctx = document.getElementById(\"benchmarkStackBar" +
                    "\");\r\n                        var myChart = new Chart(ctx, {\r\n                   " +
                    "         type: \'bar\',\r\n                            data: {\r\n                    " +
                    "            labels: [\"%{256}%\", \"%{1024}%\", \"%{4096}%\", \"%{16384}%\"],\r\n         " +
                    "                       datasets: [{\r\n                                    label: " +
                    "\"%{Client1}%\",\r\n                                    borderWidth: 1,\r\n           " +
                    "                         backgroundColor: \"#121554\",\r\n                          " +
                    "          borderColor: \"#121554\",\r\n                                    data: [10" +
                    ", 200, 500, 5000]\r\n                                },\r\n                         " +
                    "       {\r\n                                    label: \"%{Client2}%\",\r\n           " +
                    "                         borderWidth: 1,\r\n                                    ba" +
                    "ckgroundColor: \"#1d3681\",\r\n                                    borderColor: \"#1d" +
                    "3681\",\r\n                                    data: [10, 200, 500, 5000]\r\n        " +
                    "                        }, {\r\n                                    label: \"%{Clie" +
                    "nt2}%\",\r\n                                    borderWidth: 1,\r\n                  " +
                    "                  backgroundColor: \"#2e70a7\",\r\n                                 " +
                    "   borderColor: \"#2e70a7\",\r\n                                    data: [10, 200, " +
                    "500, 5000]\r\n                                }, {\r\n                              " +
                    "      label: \"%{Client3}%\",\r\n                                    borderWidth: 1," +
                    "\r\n                                    backgroundColor: \"#4eadc7\",\r\n             " +
                    "                       borderColor: \"#4eadc7\",\r\n                                " +
                    "    data: [10, 200, 500, 5000]\r\n                                }, {\r\n          " +
                    "                          label: \"%{Client3}%\",\r\n                               " +
                    "     borderWidth: 1,\r\n                                    backgroundColor: \"#a7d" +
                    "8bf\",\r\n                                    borderColor: \"#a7d8bf\",\r\n            " +
                    "                        data: [10, 200, 500, 5000]\r\n                            " +
                    "    }]\r\n\r\n                            },\r\n                            options: {" +
                    "\r\n                                title: {\r\n                                    " +
                    "display: true,\r\n                                    text: \'MagicOnion Benchmark\'" +
                    ",\r\n                                    padding: 3\r\n                             " +
                    "   },\r\n                                scales: {\r\n                              " +
                    "      xAxes: [{\r\n                                        stacked: true, // use s" +
                    "tacked bar chart\r\n                                        categoryPercentage: 0." +
                    "4 // width of bar\r\n                                    }],\r\n                    " +
                    "                yAxes: [{\r\n                                        stacked: true" +
                    " // use stacked bar chart\r\n                                    }]\r\n             " +
                    "                   },\r\n                                legend: {\r\n              " +
                    "                      labels: {\r\n                                        boxWidt" +
                    "h: 30,\r\n                                        padding: 20\r\n                   " +
                    "                 },\r\n                                    display: true\r\n        " +
                    "                        },\r\n                                tooltips: {\r\n       " +
                    "                             mode: \'label\' // data colum for tooltip\r\n          " +
                    "                      }\r\n                            }\r\n                        " +
                    "});\r\n                    </script>\r\n                </div>\r\n\r\n            </div>" +
                    "\r\n        </div>\r\n    </main>\r\n\r\n    <footer class=\"text-muted\" style=\"padding-t" +
                    "op: 3rem;padding-bottom: 3rem;\">\r\n        <div class=container>\r\n            <a " +
                    "href=\"#\" class=\"btn btn-outline-info float-right\" role=\"button\">\r\n              " +
                    "  <i class=\"fa fa-angle-up\"></i>\r\n            </a>\r\n            <p class=\"text-c" +
                    "enter\">\r\n            GitHub:\r\n                <a class=\"text-dark\" href=\"https:/" +
                    "/github.com/cysharp/MagicOnion/\">Visit the GitHub</a>\r\n            /\r\n          " +
                    "  © 2020 Copyright:\r\n                <a class=\"text-dark\" href=\"https://cysharp." +
                    "co.jp/\">Cysharp</a>\r\n            </p>\r\n        </div>\r\n    </footer>\r\n\r\n    <scr" +
                    "ipt src=\"https://stackpath.bootstrapcdn.com/bootstrap/4.5.0/js/bootstrap.min.js\"" +
                    "\r\n        integrity=\"sha384-OgVRvuATP1z7JjHLkuOU7Xw704+h835Lr+6QL9UvYjZE3Ipu6Tp7" +
                    "5j7Bh/kR0JKI\"\r\n        crossorigin=\"anonymous\"></script>\r\n    <!-- MDB -->\r\n    " +
                    "<script type=\"text/javascript\" src=\"https://cdnjs.cloudflare.com/ajax/libs/mdb-u" +
                    "i-kit/3.0.0/mdb.min.js\"></script>\r\n</body>\r\n\r\n</html>");
            return this.GenerationEnvironment.ToString();
        }
    }
    
    #line default
    #line hidden
    #region Base class
    /// <summary>
    /// Base class for this transformation
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "16.0.0.0")]
    public class BenchmarkReportPageTemplateBase
    {
        #region Fields
        private global::System.Text.StringBuilder generationEnvironmentField;
        private global::System.CodeDom.Compiler.CompilerErrorCollection errorsField;
        private global::System.Collections.Generic.List<int> indentLengthsField;
        private string currentIndentField = "";
        private bool endsWithNewline;
        private global::System.Collections.Generic.IDictionary<string, object> sessionField;
        #endregion
        #region Properties
        /// <summary>
        /// The string builder that generation-time code is using to assemble generated output
        /// </summary>
        protected System.Text.StringBuilder GenerationEnvironment
        {
            get
            {
                if ((this.generationEnvironmentField == null))
                {
                    this.generationEnvironmentField = new global::System.Text.StringBuilder();
                }
                return this.generationEnvironmentField;
            }
            set
            {
                this.generationEnvironmentField = value;
            }
        }
        /// <summary>
        /// The error collection for the generation process
        /// </summary>
        public System.CodeDom.Compiler.CompilerErrorCollection Errors
        {
            get
            {
                if ((this.errorsField == null))
                {
                    this.errorsField = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errorsField;
            }
        }
        /// <summary>
        /// A list of the lengths of each indent that was added with PushIndent
        /// </summary>
        private System.Collections.Generic.List<int> indentLengths
        {
            get
            {
                if ((this.indentLengthsField == null))
                {
                    this.indentLengthsField = new global::System.Collections.Generic.List<int>();
                }
                return this.indentLengthsField;
            }
        }
        /// <summary>
        /// Gets the current indent we use when adding lines to the output
        /// </summary>
        public string CurrentIndent
        {
            get
            {
                return this.currentIndentField;
            }
        }
        /// <summary>
        /// Current transformation session
        /// </summary>
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session
        {
            get
            {
                return this.sessionField;
            }
            set
            {
                this.sessionField = value;
            }
        }
        #endregion
        #region Transform-time helpers
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void Write(string textToAppend)
        {
            if (string.IsNullOrEmpty(textToAppend))
            {
                return;
            }
            // If we're starting off, or if the previous text ended with a newline,
            // we have to append the current indent first.
            if (((this.GenerationEnvironment.Length == 0) 
                        || this.endsWithNewline))
            {
                this.GenerationEnvironment.Append(this.currentIndentField);
                this.endsWithNewline = false;
            }
            // Check if the current text ends with a newline
            if (textToAppend.EndsWith(global::System.Environment.NewLine, global::System.StringComparison.CurrentCulture))
            {
                this.endsWithNewline = true;
            }
            // This is an optimization. If the current indent is "", then we don't have to do any
            // of the more complex stuff further down.
            if ((this.currentIndentField.Length == 0))
            {
                this.GenerationEnvironment.Append(textToAppend);
                return;
            }
            // Everywhere there is a newline in the text, add an indent after it
            textToAppend = textToAppend.Replace(global::System.Environment.NewLine, (global::System.Environment.NewLine + this.currentIndentField));
            // If the text ends with a newline, then we should strip off the indent added at the very end
            // because the appropriate indent will be added when the next time Write() is called
            if (this.endsWithNewline)
            {
                this.GenerationEnvironment.Append(textToAppend, 0, (textToAppend.Length - this.currentIndentField.Length));
            }
            else
            {
                this.GenerationEnvironment.Append(textToAppend);
            }
        }
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void WriteLine(string textToAppend)
        {
            this.Write(textToAppend);
            this.GenerationEnvironment.AppendLine();
            this.endsWithNewline = true;
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void Write(string format, params object[] args)
        {
            this.Write(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void WriteLine(string format, params object[] args)
        {
            this.WriteLine(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Raise an error
        /// </summary>
        public void Error(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Raise a warning
        /// </summary>
        public void Warning(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            error.IsWarning = true;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Increase the indent
        /// </summary>
        public void PushIndent(string indent)
        {
            if ((indent == null))
            {
                throw new global::System.ArgumentNullException("indent");
            }
            this.currentIndentField = (this.currentIndentField + indent);
            this.indentLengths.Add(indent.Length);
        }
        /// <summary>
        /// Remove the last indent that was added with PushIndent
        /// </summary>
        public string PopIndent()
        {
            string returnValue = "";
            if ((this.indentLengths.Count > 0))
            {
                int indentLength = this.indentLengths[(this.indentLengths.Count - 1)];
                this.indentLengths.RemoveAt((this.indentLengths.Count - 1));
                if ((indentLength > 0))
                {
                    returnValue = this.currentIndentField.Substring((this.currentIndentField.Length - indentLength));
                    this.currentIndentField = this.currentIndentField.Remove((this.currentIndentField.Length - indentLength));
                }
            }
            return returnValue;
        }
        /// <summary>
        /// Remove any indentation
        /// </summary>
        public void ClearIndent()
        {
            this.indentLengths.Clear();
            this.currentIndentField = "";
        }
        #endregion
        #region ToString Helpers
        /// <summary>
        /// Utility class to produce culture-oriented representation of an object as a string.
        /// </summary>
        public class ToStringInstanceHelper
        {
            private System.IFormatProvider formatProviderField  = global::System.Globalization.CultureInfo.InvariantCulture;
            /// <summary>
            /// Gets or sets format provider to be used by ToStringWithCulture method.
            /// </summary>
            public System.IFormatProvider FormatProvider
            {
                get
                {
                    return this.formatProviderField ;
                }
                set
                {
                    if ((value != null))
                    {
                        this.formatProviderField  = value;
                    }
                }
            }
            /// <summary>
            /// This is called from the compile/run appdomain to convert objects within an expression block to a string
            /// </summary>
            public string ToStringWithCulture(object objectToConvert)
            {
                if ((objectToConvert == null))
                {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                System.Type t = objectToConvert.GetType();
                System.Reflection.MethodInfo method = t.GetMethod("ToString", new System.Type[] {
                            typeof(System.IFormatProvider)});
                if ((method == null))
                {
                    return objectToConvert.ToString();
                }
                else
                {
                    return ((string)(method.Invoke(objectToConvert, new object[] {
                                this.formatProviderField })));
                }
            }
        }
        private ToStringInstanceHelper toStringHelperField = new ToStringInstanceHelper();
        /// <summary>
        /// Helper to produce culture-oriented representation of an object as a string
        /// </summary>
        public ToStringInstanceHelper ToStringHelper
        {
            get
            {
                return this.toStringHelperField;
            }
        }
        #endregion
    }
    #endregion
}
